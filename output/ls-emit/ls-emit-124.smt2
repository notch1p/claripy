(declare-fun args_1_8 () (_ BitVec 8))
(declare-fun args_2_8 () (_ BitVec 8))
(declare-fun args_0_8 () (_ BitVec 8))
(assert (let ((a!1 (concat (concat #b11111111111111111111111111111111111111111111111111111111111
                           (ite (= #x2f args_2_8) #b0 #b1))
                   #b1))
      (a!3 (concat (concat #b00000000000000001111111111111111111111110000000000000000101
                           (ite (= #x00 args_2_8) #b1 #b0))
                   #b101))
      (a!6 (concat (concat #b01 (ite (= #x00 args_2_8) #b1 #b0)) #b101))
      (a!8 (concat (concat #b1 (ite (= #x00 args_2_8) #b1 #b0)) #b101))
      (a!11 (concat (concat (ite (= #x00 args_2_8) #b1 #b0) #b101)
                    (ite (= #x00 args_0_8) #b1 #b0)))
      (a!13 (bvadd #xf (concat #b101 (ite (= #x00 args_0_8) #b1 #b0))))
      (a!14 (bvadd #b111 (concat #b01 (ite (= #x00 args_0_8) #b1 #b0))))
      (a!15 (bvadd #b11 (concat #b1 (ite (= #x00 args_0_8) #b1 #b0))))
      (a!17 (bvxor (bvadd #b1 (ite (= #x00 args_0_8) #b1 #b0))
                   (ite (= #x00 args_0_8) #b1 #b0)))
      (a!19 (bvule (bvadd #b10000011100011001011100
                          (concat (concat #b0000000000000 args_1_8) #b00))
                   #b10000011100011101011000))
      (a!20 (not (or (not (= #x01 args_1_8)) (= #x3f args_1_8)))))
(let ((a!2 (concat (concat a!1 (ite (= #x2f args_1_8) #b0 #b1)) #b1))
      (a!4 (bvadd #xffffffffffffffff
                  (concat a!3 (ite (= #x00 args_0_8) #b1 #b0))))
      (a!7 (bvadd #b1111111 (concat a!6 (ite (= #x00 args_0_8) #b1 #b0))))
      (a!9 (bvadd #b111111 (concat a!8 (ite (= #x00 args_0_8) #b1 #b0))))
      (a!12 (bvnot (bvxor ((_ extract 4 4) (bvadd #b11111 a!11))
                          (ite (= #x00 args_2_8) #b1 #b0))))
      (a!21 (or (= #x3e args_1_8) (not (or (= #x02 args_1_8) a!20)))))
(let ((a!5 (concat (concat (bvnot ((_ extract 63 48) a!4))
                           ((_ extract 47 24) a!4))
                   (bvnot ((_ extract 23 8) a!4))))
      (a!22 (or (= #x3d args_1_8) (not (or (= #x03 args_1_8) (not a!21))))))
(let ((a!10 (concat (concat (concat a!5 ((_ extract 7 7) a!4))
                            (bvnot ((_ extract 6 6) a!7)))
                    ((_ extract 5 5) a!9)))
      (a!23 (or (= #x3c args_1_8) (not (or (= #x04 args_1_8) (not a!22))))))
(let ((a!16 (concat (concat (concat (concat a!10 a!12) ((_ extract 3 3) a!13))
                            (bvnot ((_ extract 2 2) a!14)))
                    ((_ extract 1 1) a!15)))
      (a!24 (or (= #x3b args_1_8) (not (or (= #x05 args_1_8) (not a!23))))))
(let ((a!18 (bvor (concat a!2 (ite (= #x2f args_0_8) #b0 #b1))
                  (concat a!16 (bvnot a!17))))
      (a!25 (or (not (or (= #x06 args_1_8) (not a!24)))
                (= #x33 args_1_8)
                (= #x0d args_1_8)
                (= #x34 args_1_8)
                (= #x0c args_1_8)
                (= #x35 args_1_8)
                (= #x0b args_1_8)
                (= #x36 args_1_8)
                (= #x0a args_1_8)
                (= #x37 args_1_8)
                (= #x09 args_1_8)
                (= #x38 args_1_8)
                (= #x08 args_1_8)
                (= #x39 args_1_8)
                (= #x3a args_1_8)
                (= #x07 args_1_8))))
(let ((a!26 (or (= #x32 args_1_8) (not (or (= #x0e args_1_8) (not a!25))))))
(let ((a!27 (or (= #x31 args_1_8) (not (or (= #x0f args_1_8) (not a!26))))))
(let ((a!28 (or (= #x30 args_1_8) (not (or (= #x10 args_1_8) (not a!27))))))
(let ((a!29 (or (= #x2f args_1_8) (not (or (= #x11 args_1_8) (not a!28))))))
(let ((a!30 (or (= #x2e args_1_8) (not (or (= #x12 args_1_8) (not a!29))))))
(let ((a!31 (or (= #x2c args_1_8) (not (or (= #x13 args_1_8) (not a!30))))))
(let ((a!32 (or (= #x2b args_1_8) (not (or (= #x14 args_1_8) (not a!31))))))
(let ((a!33 (or (= #x2a args_1_8) (not (or (= #x15 args_1_8) (not a!32))))))
(let ((a!34 (or (= #x29 args_1_8) (not (or (= #x16 args_1_8) (not a!33))))))
(let ((a!35 (or (= #x28 args_1_8) (not (or (= #x17 args_1_8) (not a!34))))))
(let ((a!36 (or (= #x27 args_1_8) (not (or (= #x18 args_1_8) (not a!35))))))
(let ((a!37 (or (= #x26 args_1_8) (not (or (= #x19 args_1_8) (not a!36))))))
(let ((a!38 (or (= #x25 args_1_8) (not (or (= #x1a args_1_8) (not a!37))))))
(let ((a!39 (or (= #x24 args_1_8) (not (or (= #x1b args_1_8) (not a!38))))))
(let ((a!40 (or (= #x23 args_1_8) (not (or (= #x1c args_1_8) (not a!39))))))
(let ((a!41 (or (= #x22 args_1_8) (not (or (= #x1d args_1_8) (not a!40))))))
(let ((a!42 (or (= #x21 args_1_8) (not (or (= #x1e args_1_8) (not a!41))))))
  (and (not (= #x2d args_1_8))
       (= #x0000000000000000 (bvnot a!18))
       (not (= #x2d args_2_8))
       (= #b00 ((_ extract 7 6) args_1_8))
       (bvule #b0000000100 (concat args_1_8 #b00))
       a!19
       (not (= #x20 args_1_8))
       (or (= #x1f args_1_8) (not a!42)))))))))))))))))))))))))))
(define-fun goal () (_ BitVec 64) (bvadd (bvshl ((_ zero_extend 32) ((_ zero_extend 24) args_1_8))
              #x0000000000000001)
       #x00000000c0000101)) 
(minimize goal)
(check-sat)